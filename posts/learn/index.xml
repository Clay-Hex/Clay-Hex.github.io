<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>📚 学习 on Clay&#39;s Blog</title>
    <link>https://www.clayhex.com/posts/learn/</link>
    <description>Recent content in 📚 学习 on Clay&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 21 Aug 2024 23:24:46 +0800</lastBuildDate>
    <atom:link href="https://www.clayhex.com/posts/learn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Anaconda的平替 - Miniforge</title>
      <link>https://www.clayhex.com/posts/2024/08/miniforge-replaces-anaconda/</link>
      <pubDate>Wed, 21 Aug 2024 23:24:46 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2024/08/miniforge-replaces-anaconda/</guid>
      <description>&lt;p&gt;Anaconda在2020年的一次公告中宣布，对于团队用户，他们将开始收费。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;团队人数少于200人，可以继续免费使用。&lt;/li&gt;
&lt;li&gt;收费的范围是Anaconda团队提供的default通道中的软件包。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果我继续使用Anaconda发行版软件，但是不用Anaconda的下载通道，要不要付费呢？ 没有实践，直接卸载吧还是。&lt;/p&gt;</description>
    </item>
    <item>
      <title>任务管线框架 - Luigi</title>
      <link>https://www.clayhex.com/posts/2024/08/luigi-tasks/</link>
      <pubDate>Sat, 17 Aug 2024 16:10:58 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2024/08/luigi-tasks/</guid>
      <description>&lt;h1 id=&#34;简述&#34;&gt;简述&lt;/h1&gt;
&lt;p&gt;Luigi基于Python，可以快速搭建数据处理的任务管线。&lt;br&gt;
在一定程度上支持分布式处理。&lt;/p&gt;
&lt;h1 id=&#34;开始一个任务&#34;&gt;开始一个任务&lt;/h1&gt;
&lt;p&gt;使用luigi启动一个任务，有两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过luigi命令行执行&lt;br&gt;
类似 &lt;code&gt;luigi --module main MyTaskAll --id 1 --local-scheduler&lt;/code&gt;，这里&lt;code&gt;main&lt;/code&gt;是我的.py文件名（为了可以找到整个main.py，执行前需要把main.py所在路径加到PythonPath里边），&lt;code&gt;MyTaskAll&lt;/code&gt;是main.py中我定义的Task类名，&lt;code&gt;--id 1&lt;/code&gt;是传给&lt;code&gt;MyTaskAll&lt;/code&gt;任务的具体参数。&lt;code&gt;--local-scheduler&lt;/code&gt;是配置调度器，这个后边会说。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;选手如何快速入门Python?</title>
      <link>https://www.clayhex.com/posts/2024/07/cpper-to-pythoner/</link>
      <pubDate>Thu, 11 Jul 2024 21:14:16 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2024/07/cpper-to-pythoner/</guid>
      <description>&lt;h1 id=&#34;1-实际是静态语言vs动态语言&#34;&gt;1. 实际是静态语言vs动态语言&lt;/h1&gt;
&lt;p&gt;之前，一直使用C/C++做开发，最近开始尝试使用Python做一些小的工具，顺便学习一下。&lt;br&gt;
包括在学生阶段，我也喜欢C/C++，有更强的控制感，程序的每一步，我都要尽可能的掌握，清楚它到底在做什么。也偶尔用过几次Java做些事情。总而言之，这都属于“静态语言”。与之相对的是“动态语言”，典型代表就是&lt;code&gt;Python&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git恢复已删除的分支</title>
      <link>https://www.clayhex.com/posts/2024/07/git-recovery-deleted-branch/</link>
      <pubDate>Wed, 10 Jul 2024 21:14:10 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2024/07/git-recovery-deleted-branch/</guid>
      <description>&lt;p&gt;最近在开发中，需要恢复git中已经删除的分支。&lt;br&gt;
情况是这样，有两个开发分支，&lt;code&gt;dev_1&lt;/code&gt;和&lt;code&gt;dev_2&lt;/code&gt;，之所以维护两个，是因为需求存在分叉。&lt;br&gt;
最近在&lt;code&gt;dev_1&lt;/code&gt;上出现了bug，所以，我开了一个&lt;code&gt;fix&lt;/code&gt;分支出来进行修复，修复完毕后，&lt;code&gt;merge&lt;/code&gt;回&lt;code&gt;dev_1&lt;/code&gt;上了，接着就把这个&lt;code&gt;fix&lt;/code&gt;分支删除了。但是，这些改动仍然需要fix到&lt;code&gt;dev_2&lt;/code&gt;上，此时，办法不唯一。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用Google Indexing API快速收录</title>
      <link>https://www.clayhex.com/posts/2024/07/google-indexing-api/</link>
      <pubDate>Fri, 05 Jul 2024 22:52:56 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2024/07/google-indexing-api/</guid>
      <description>&lt;p&gt;Google indexing api是谷歌提供的针对搜索引擎索引功能的接口，相比于在Google search console上提交sitemap，API收录速度要快得多。刚开始的时候，我在GSC上提交了sitemap，后来一段时间，就不抓取了，也不收录，不清楚什么原因。后来使用api直接提交，第二天就可以索引到了。&lt;/p&gt;
&lt;p&gt;操作步骤参考官方文档：&lt;br&gt;
&lt;a href=&#34;https://developers.google.com/search/apis/indexing-api/v3/quickstart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; style=&#34;color:#42b983&#34;;&gt;https://developers.google.com/search/apis/indexing-api/v3/quickstart&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>H264、H265码流中的SEI NALU</title>
      <link>https://www.clayhex.com/posts/2024/05/h264-h265-stream-nalu-sei/</link>
      <pubDate>Thu, 23 May 2024 21:52:28 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2024/05/h264-h265-stream-nalu-sei/</guid>
      <description>&lt;h1 id=&#34;h264码流&#34;&gt;H264码流&lt;/h1&gt;
&lt;p&gt;H264协议中将编码器分成两个逻辑层，就是经常见到的VCL（视频数据编码层）和NAL（网络抽象层）。VCL负责具体图像数据的编码，NAL负责组织这些编码后的数据。&lt;/p&gt;
&lt;p&gt;既然称之为码流，那么，这些数据肯定像流一样，一位接着一位的排成一队。组织这些编码数据的方式，常见的是&lt;code&gt;Annex B&lt;/code&gt;格式和&lt;code&gt;AVCC&lt;/code&gt;格式，感觉&lt;code&gt;Annex B&lt;/code&gt;格式最为常见，它长这样：&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;学习记录(15) 条件变量与互斥锁</title>
      <link>https://www.clayhex.com/posts/2022/11/cpp-conditional-variables-lock/</link>
      <pubDate>Fri, 18 Nov 2022 00:39:31 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2022/11/cpp-conditional-variables-lock/</guid>
      <description>c&#43;&#43;中的条件变量与互斥锁</description>
    </item>
    <item>
      <title>QT中线程启动方式和操作的注意问题</title>
      <link>https://www.clayhex.com/posts/2022/11/qt-thread/</link>
      <pubDate>Tue, 15 Nov 2022 09:52:46 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2022/11/qt-thread/</guid>
      <description>&lt;h1 id=&#34;0-qt中线程启动的方式&#34;&gt;0. QT中线程启动的方式&lt;/h1&gt;
&lt;h2 id=&#34;01-继承qthread&#34;&gt;0.1 继承QThread&lt;/h2&gt;
&lt;p&gt;继承QThread时，子类必须重写run方法，保证线程在手动结束之前持续运行。&lt;br&gt;
当子类使用start方法启动后，run方法会在生命周期内循环执行。&lt;/p&gt;
&lt;p&gt;.h文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#ifndef CLASS1_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define CLASS1_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;QObject&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;QThread&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 继承QTQThread
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Class1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;QThread&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Q_OBJECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Class1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QThread&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Class1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;override&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;slots&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;testFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#endif &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// CLASS1_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;.cpp文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;class1.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;QDebug&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Class1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Class1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QThread&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;QThread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Class1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Class1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Class1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;qDebug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;class 1 run threadID : &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentThreadId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 测试代码，写成了死循环，实际中应该避免这样写
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;msleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Class1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;testFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;qDebug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;class1 testFunc threadID : &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentThreadId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;02-使用movetothread启动&#34;&gt;0.2 使用moveToThread启动&lt;/h2&gt;
&lt;p&gt;这种方式较为简单，正常写自己的类即可，为了保证其方法可以在线程上执行，需要继承&lt;code&gt;QObject&lt;/code&gt;类。&lt;br&gt;
在使用时首先生成子类对象，同时new一个QThread出来，然后使用子类的&lt;code&gt;moveToThread&lt;/code&gt;方法，将子类放到刚刚new出来的QThread上，再启动该线程即可。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python3.6环境使用ERS超像素分割算法</title>
      <link>https://www.clayhex.com/posts/2022/05/python3-ers-superpixel-segmentation/</link>
      <pubDate>Wed, 04 May 2022 12:50:00 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2022/05/python3-ers-superpixel-segmentation/</guid>
      <description>&lt;h1 id=&#34;0-ers算法&#34;&gt;0. ERS算法&lt;/h1&gt;
&lt;p&gt;xxx&lt;/p&gt;
&lt;h1 id=&#34;1-问题&#34;&gt;1. 问题&lt;/h1&gt;
&lt;p&gt;原本ERS算法的作者提供了python接口，但是是基于Python2的，在python3.6中调用的话，会出现缺失DLL的错误，如下图：&lt;/p&gt;
&lt;center&gt;&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;pic1.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/center&gt;
&lt;h1 id=&#34;2-解决方案&#34;&gt;2. 解决方案&lt;/h1&gt;
&lt;p&gt;作者提供了ERS算法的C语言源代码，所以基于Python3.6重新编译一下即可。&lt;/p&gt;
&lt;h2 id=&#34;21-安装vs&#34;&gt;2.1 安装vs&lt;/h2&gt;
&lt;p&gt;我安装的是VS2017社区版。&lt;/p&gt;</description>
    </item>
    <item>
      <title>算术表达式计算方法</title>
      <link>https://www.clayhex.com/posts/2022/05/cpp-arithmetic-expression/</link>
      <pubDate>Mon, 02 May 2022 10:52:27 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2022/05/cpp-arithmetic-expression/</guid>
      <description>&lt;h1 id=&#34;0-表达式树&#34;&gt;0. 表达式树&lt;/h1&gt;
&lt;p&gt;在一颗树中，叶子节点都是操作数，所有的非叶子节点都是运算符，这样的树叫做表达式树。&lt;br&gt;
如图:&lt;/p&gt;
&lt;center&gt;&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;pic1.png&#34; width=&#34;30%&#34;/&gt; 
&lt;/figure&gt;
&lt;/center&gt;
&lt;h1 id=&#34;1-后缀表达式计算&#34;&gt;1. 后缀表达式计算&lt;/h1&gt;
&lt;p&gt;后缀表达式：也叫逆波兰表达式，是表达式树的后序遍历。&lt;/p&gt;
&lt;p&gt;在计算时，不用还原出整棵树，可用一个栈来辅助计算。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; style=&#34;color:#42b983&#34;;&gt;leetcode 150. 逆波兰表达式求值&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Solution&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;evalRPN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tokens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10005&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tokens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stoi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;2-中缀表达式计算&#34;&gt;2. 中缀表达式计算&lt;/h1&gt;
&lt;h2 id=&#34;法1&#34;&gt;法1:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;转成后缀表达式计算。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;法2&#34;&gt;法2：&lt;/h2&gt;
&lt;p&gt;直接利用表达式树计算结果&lt;br&gt;
需要两个栈：数字栈 和 符号栈&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cityscapes DataSet 数据集</title>
      <link>https://www.clayhex.com/posts/2022/04/cityscapes-dataset/</link>
      <pubDate>Thu, 28 Apr 2022 08:58:44 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2022/04/cityscapes-dataset/</guid>
      <description>&lt;h1 id=&#34;0-数据集概述&#34;&gt;0. 数据集概述&lt;/h1&gt;
&lt;p&gt;Cityscapes 数据集专注于对城市街景的语义理解。&lt;/p&gt;
&lt;h1 id=&#34;1-特点&#34;&gt;1. 特点&lt;/h1&gt;
&lt;p&gt;多边形的标签&lt;br&gt;
实例分割车辆和人&lt;br&gt;
30个类别&lt;br&gt;
5000张精细标注的图&lt;br&gt;
20000张粗略标注的图&lt;/p&gt;
&lt;p&gt;leftImg8bit_trainvaltest.zip (11GB)&lt;br&gt;
left 8-bit images - train, val, and test sets (5000 images)&lt;br&gt;
&lt;a href=&#34;https://www.cityscapes-dataset.com/file-handling/?packageID=3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; style=&#34;color:#42b983&#34;;&gt;https://www.cityscapes-dataset.com/file-handling/?packageID=3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;rightImg8bit_trainvaltest.zip (11GB)&lt;br&gt;
right 8-bit images - train, val, and test sets (5000 images)&lt;br&gt;
&lt;a href=&#34;https://www.cityscapes-dataset.com/file-handling/?packageID=5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; style=&#34;color:#42b983&#34;;&gt;https://www.cityscapes-dataset.com/file-handling/?packageID=5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;disparity_trainvaltest.zip (3.5GB)&lt;br&gt;
precomputed depth maps using SGM for train, val, and test sets (5000 images)&lt;br&gt;
&lt;a href=&#34;https://www.cityscapes-dataset.com/file-handling/?packageID=7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; style=&#34;color:#42b983&#34;;&gt;https://www.cityscapes-dataset.com/file-handling/?packageID=7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;camera_trainvaltest.zip (2MB) [md5]&lt;br&gt;
intrinsic and extrinsic camera parameters for train, val, and test sets&lt;br&gt;
&lt;a href=&#34;https://www.cityscapes-dataset.com/file-handling/?packageID=8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; style=&#34;color:#42b983&#34;;&gt;https://www.cityscapes-dataset.com/file-handling/?packageID=8&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;脚本安装&#34;&gt;脚本安装&lt;/h1&gt;
&lt;h2 id=&#34;1-使用github安装&#34;&gt;1. 使用github安装&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mcordts/cityscapesScripts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; style=&#34;color:#42b983&#34;;&gt;https://github.com/mcordts/cityscapesScripts&lt;/a&gt;&lt;br&gt;
从github上下载官方提供的脚本代码。&lt;br&gt;
然后把下载的数据集数据也放进来，和&lt;code&gt;setup.py&lt;/code&gt;放在同级目录下。例如下图（图中的only_person文件夹是本人自建的，官方提供的没有）&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;学习记录(14) 构造函数与析构函数</title>
      <link>https://www.clayhex.com/posts/2022/04/cpp-constructors-destructors/</link>
      <pubDate>Tue, 26 Apr 2022 11:48:13 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2022/04/cpp-constructors-destructors/</guid>
      <description>c&#43;&#43;中的构造函数与析构函数</description>
    </item>
    <item>
      <title>常见排序算法及稳定性</title>
      <link>https://www.clayhex.com/posts/2021/12/sorting-algorithm-stability/</link>
      <pubDate>Mon, 20 Dec 2021 20:04:26 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/12/sorting-algorithm-stability/</guid>
      <description>常见排序算法模板及稳定性</description>
    </item>
    <item>
      <title>2C4T与4C4T在计算密集型任务下的效率对比</title>
      <link>https://www.clayhex.com/posts/2021/10/2c4t-4c4t-compute-intensive-task/</link>
      <pubDate>Sun, 03 Oct 2021 20:45:51 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/10/2c4t-4c4t-compute-intensive-task/</guid>
      <description>&lt;h1 id=&#34;1-环境&#34;&gt;1. 环境&lt;/h1&gt;
&lt;p&gt;机器1：Intel(R) Core(TM) i5-4200H CPU @ 2.80GHz，双核四线程，win10 x64，16G内存&lt;br&gt;
机器2：Intel(R) Core(TM) i3-9100T CPU @ 3.10GHz，四核四线程。wn10 x64，8G内存&lt;/p&gt;
&lt;p&gt;目的：大概测试一下2C4T与4C4T在计算密集型任务下的效率提升对比，内存大小、频率暂且忽略。&lt;/p&gt;
&lt;p&gt;方法：使用openMP控制计算任务中的线程使用数量，测试12层for循环所消耗的时间（12是1、2、3、4的公倍数，防止openMP分配任务不均）。实际是测120层的耗时，再除以10。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;学习记录(13) new与delete</title>
      <link>https://www.clayhex.com/posts/2021/08/cpp-new-and-delete/</link>
      <pubDate>Fri, 20 Aug 2021 22:23:55 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/08/cpp-new-and-delete/</guid>
      <description>c&#43;&#43;中的new与delete</description>
    </item>
    <item>
      <title>小数在计算机中的存储方式</title>
      <link>https://www.clayhex.com/posts/2021/08/floating-point-and-fixed-point-storage-method/</link>
      <pubDate>Tue, 17 Aug 2021 23:16:06 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/08/floating-point-and-fixed-point-storage-method/</guid>
      <description>&lt;h1 id=&#34;0-小数在计算机中的存储&#34;&gt;0. 小数在计算机中的存储&lt;/h1&gt;
&lt;p&gt;两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定点&lt;/li&gt;
&lt;li&gt;浮点&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-定点数&#34;&gt;1. 定点数&lt;/h1&gt;
&lt;p&gt;顾名思义，小数点的位置固定的。&lt;/p&gt;
&lt;p&gt;也就是说，用&lt;code&gt;固定数量&lt;/code&gt;的&lt;code&gt;bit&lt;/code&gt;存储&lt;code&gt;整数部分&lt;/code&gt;，也用&lt;code&gt;固定数量&lt;/code&gt;的&lt;code&gt;bit&lt;/code&gt;存储&lt;code&gt;小数部分&lt;/code&gt;，另外再用一个bit存储符号位。&lt;/p&gt;
&lt;p&gt;计算时，将三个部分拼接起来，加个小数点即可。&lt;/p&gt;
&lt;p&gt;优点：小数点位置固定，方便计算。&lt;br&gt;
缺点：表示输的范围受限。&lt;/p&gt;
&lt;h1 id=&#34;2-浮点数&#34;&gt;2. 浮点数&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;浮点数在计算机中的存储依赖科学计数法。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;学习记录(12) 类型转换</title>
      <link>https://www.clayhex.com/posts/2021/08/cpp-type-conversion/</link>
      <pubDate>Mon, 02 Aug 2021 21:07:40 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/08/cpp-type-conversion/</guid>
      <description>c&#43;&#43;中的类型转换</description>
    </item>
    <item>
      <title>C&#43;&#43;学习记录(11) 智能指针</title>
      <link>https://www.clayhex.com/posts/2021/07/cpp-smart-pointers/</link>
      <pubDate>Sat, 10 Jul 2021 22:26:24 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/07/cpp-smart-pointers/</guid>
      <description>c&#43;&#43;中的智能指针</description>
    </item>
    <item>
      <title>Wireshark配合TCP调试工具理解TCP三次握手和四次挥手过程</title>
      <link>https://www.clayhex.com/posts/2021/07/wireshark-tcp-handshake-wave/</link>
      <pubDate>Tue, 06 Jul 2021 15:22:40 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/07/wireshark-tcp-handshake-wave/</guid>
      <description>&lt;h1 id=&#34;0-原材料&#34;&gt;0. 原材料&lt;/h1&gt;
&lt;p&gt;抓包工具：&lt;code&gt;wireshark&lt;/code&gt;&lt;br&gt;
许多文章都是使用浏览器去访问一个网站，抓http的包，进而分析下层的tcp协议过程，但是数据比较多，不清晰，所以我采用了TCP调试助手，这样的话，没有http数据的干预，比较清晰。&lt;/p&gt;
&lt;center&gt;&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;pic1.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/center&gt;
&lt;h1 id=&#34;1-环境&#34;&gt;1. 环境&lt;/h1&gt;
&lt;p&gt;借用&lt;code&gt;www.huawei.com&lt;/code&gt;的ip地址&lt;code&gt;183.66.110.167&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;学习记录(10) 内存对齐</title>
      <link>https://www.clayhex.com/posts/2021/06/cpp-memory-alignment/</link>
      <pubDate>Fri, 25 Jun 2021 21:26:00 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/06/cpp-memory-alignment/</guid>
      <description>c&#43;&#43;中的内存对齐问题</description>
    </item>
    <item>
      <title>C&#43;&#43;学习记录(9) 常量折叠</title>
      <link>https://www.clayhex.com/posts/2021/06/cpp-constant-folding/</link>
      <pubDate>Thu, 24 Jun 2021 09:09:56 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/06/cpp-constant-folding/</guid>
      <description>关于c&#43;&#43;中的常量折叠问题</description>
    </item>
    <item>
      <title>双目立体视觉的成像原理及相关问题</title>
      <link>https://www.clayhex.com/posts/2021/04/binocular-stereo-vision-theory/</link>
      <pubDate>Sun, 25 Apr 2021 22:00:07 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/04/binocular-stereo-vision-theory/</guid>
      <description>&lt;h1 id=&#34;序&#34;&gt;序：&lt;/h1&gt;
&lt;p&gt;记录学习过程中自己的理解以及遇到的问题，慢慢补充。&lt;br&gt;
若有错误，还希望各位大佬不吝赐教。&lt;/p&gt;
&lt;h1 id=&#34;0-零零散散&#34;&gt;0. 零零散散&lt;/h1&gt;
&lt;h2 id=&#34;01-公开数据集&#34;&gt;0.1 公开数据集&lt;/h2&gt;
&lt;p&gt;Middlebury：https://vision.middlebury.edu/stereo/data/(室内)&lt;br&gt;
KITTI：http://www.cvlibs.net/datasets/kitti/stereo(室外驾驶)&lt;br&gt;
SceneFlow：https://lmb.informatik.uni-freiburg.de/resources/datasets&lt;/p&gt;</description>
    </item>
    <item>
      <title>SGM算法开源库libSGM在windows下的编译和使用</title>
      <link>https://www.clayhex.com/posts/2021/04/windows-libsgm/</link>
      <pubDate>Fri, 23 Apr 2021 17:06:35 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/04/windows-libsgm/</guid>
      <description>&lt;h1 id=&#34;0-原材料&#34;&gt;0. 原材料&lt;/h1&gt;
&lt;p&gt;libSGM开源库是一个使用CUDA对半全局匹配算法SGM的加速实现版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;英伟达显卡（算力 &amp;gt;= 3.5）&lt;/li&gt;
&lt;li&gt;cuda环境（我的版本是cuda 10.0）&lt;/li&gt;
&lt;li&gt;OpenCV（版本 &amp;gt;= 3.0）&lt;/li&gt;
&lt;li&gt;Cmake（版本&amp;gt;=3.1）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-源码下载和编译&#34;&gt;1. 源码下载和编译&lt;/h1&gt;
&lt;h2 id=&#34;10-代码clone&#34;&gt;1.0 代码clone&lt;/h2&gt;
&lt;p&gt;开源库地址：&lt;br&gt;
&lt;a href=&#34;https://github.com/fixstars/libSGM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; style=&#34;color:#42b983&#34;;&gt;https://github.com/fixstars/libSGM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先把代码clone到本地来。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows环境下配置MQTT服务器(mosquitto)</title>
      <link>https://www.clayhex.com/posts/2021/04/windows-mqtt-server-mosquitto/</link>
      <pubDate>Sat, 10 Apr 2021 20:30:52 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/04/windows-mqtt-server-mosquitto/</guid>
      <description>Windows环境下配置MQTT服务器</description>
    </item>
    <item>
      <title>C&#43;&#43;学习记录(8) 模板</title>
      <link>https://www.clayhex.com/posts/2021/02/cpp-template/</link>
      <pubDate>Sat, 20 Feb 2021 14:25:23 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/02/cpp-template/</guid>
      <description>c&#43;&#43;中的模板</description>
    </item>
    <item>
      <title>C&#43;&#43;学习记录(7) 多态</title>
      <link>https://www.clayhex.com/posts/2021/02/cpp-polymorphic/</link>
      <pubDate>Wed, 17 Feb 2021 17:14:03 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/02/cpp-polymorphic/</guid>
      <description>c&#43;&#43;中的多态</description>
    </item>
    <item>
      <title>C&#43;&#43;学习记录(6) 继承</title>
      <link>https://www.clayhex.com/posts/2021/02/cpp-inheritance/</link>
      <pubDate>Wed, 17 Feb 2021 14:56:59 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/02/cpp-inheritance/</guid>
      <description>c&#43;&#43;中的继承问题</description>
    </item>
    <item>
      <title>C&#43;&#43;学习记录(5) 类</title>
      <link>https://www.clayhex.com/posts/2021/02/cpp-class/</link>
      <pubDate>Wed, 17 Feb 2021 14:56:45 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/02/cpp-class/</guid>
      <description>c&#43;&#43;中的类</description>
    </item>
    <item>
      <title>C&#43;&#43;学习记录(4) 引用</title>
      <link>https://www.clayhex.com/posts/2021/02/cpp-reference/</link>
      <pubDate>Tue, 16 Feb 2021 19:25:59 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/02/cpp-reference/</guid>
      <description>c&#43;&#43;中的引用</description>
    </item>
    <item>
      <title>C&#43;&#43;学习记录(3) 常量指针与指针常量</title>
      <link>https://www.clayhex.com/posts/2021/02/cpp-constant-pointer-and-pointer-constant/</link>
      <pubDate>Mon, 15 Feb 2021 22:05:41 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/02/cpp-constant-pointer-and-pointer-constant/</guid>
      <description>c&#43;&#43;中的常量指针与指针常量</description>
    </item>
    <item>
      <title>单调栈与单调队列详解</title>
      <link>https://www.clayhex.com/posts/2021/02/monotone-stack-monotone-queue/</link>
      <pubDate>Tue, 09 Feb 2021 12:58:52 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/02/monotone-stack-monotone-queue/</guid>
      <description>关于单调栈与单调队列的一些问题</description>
    </item>
    <item>
      <title>C&#43;&#43;学习记录(2) Lambda表达式（匿名函数）</title>
      <link>https://www.clayhex.com/posts/2021/01/cpp-lambda-function/</link>
      <pubDate>Thu, 28 Jan 2021 17:27:47 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/01/cpp-lambda-function/</guid>
      <description>c&#43;&#43;中的匿名函数</description>
    </item>
    <item>
      <title>C&#43;&#43;学习记录(1) 重写、重载、重构三者区别</title>
      <link>https://www.clayhex.com/posts/2021/01/cpp-override-overload-refactoring/</link>
      <pubDate>Thu, 28 Jan 2021 12:33:10 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2021/01/cpp-override-overload-refactoring/</guid>
      <description>重写 重载 重构</description>
    </item>
    <item>
      <title>VS2017 OpenCV4.4.0使用Openvino加速dnn模块推理速度</title>
      <link>https://www.clayhex.com/posts/2020/12/vs2017-openvino-opencv-dnn-forword/</link>
      <pubDate>Tue, 15 Dec 2020 20:22:37 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2020/12/vs2017-openvino-opencv-dnn-forword/</guid>
      <description>&lt;h2 id=&#34;step0-准备文件&#34;&gt;Step0 准备文件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;opencv-4.4.0.zip&lt;/li&gt;
&lt;li&gt;opencv_contrib-4.4.0.zip&lt;/li&gt;
&lt;li&gt;cmake-3.19.1-win64-x64_2.msi&lt;/li&gt;
&lt;li&gt;w_openvino_toolkit_p_2020.4.287.exe&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;step1-解压文件&#34;&gt;Step1 解压文件&lt;/h2&gt;
&lt;p&gt;安装cmake-3.19.1-win64-x64_2.msi和w_openvino_toolkit_p_2020.4.287.exe，都默认就好。&lt;/p&gt;
&lt;p&gt;将opencv-4.4.0.zip解压到文件夹opencv440中&lt;/p&gt;
&lt;p&gt;将opencv_contrib-4.4.0.zip解压到文件夹opencv440/opencv_contrib中&lt;/p&gt;</description>
    </item>
    <item>
      <title>扩展欧几里得算法详解及C&#43;&#43;代码实现</title>
      <link>https://www.clayhex.com/posts/2020/09/exgcd-cpp-code/</link>
      <pubDate>Sun, 06 Sep 2020 22:22:28 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2020/09/exgcd-cpp-code/</guid>
      <description>扩展欧几里得算法及其代码实现</description>
    </item>
    <item>
      <title>单片机AT指令操作GA6-B短信模块连接阿里云MQTT服务器（双向通信）</title>
      <link>https://www.clayhex.com/posts/2020/04/single-chip-microcomputer-at-ga6-b-ali-mqtt/</link>
      <pubDate>Thu, 30 Apr 2020 20:14:44 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2020/04/single-chip-microcomputer-at-ga6-b-ali-mqtt/</guid>
      <description>&lt;h1 id=&#34;0-前言&#34;&gt;0. 前言&lt;/h1&gt;
&lt;p&gt;网上这种东西不太多，我也是看了不少资料弄出来了，觉得应该写点东西出来。&lt;br&gt;
我用的板子不是arduino，用的是stm32，开发工具是Arduino IDE，因为Arduino IDE集成了较多的函数库，我们不用管底层的一些东西，都封装好了，写着方便一些。&lt;br&gt;
当然，不管你板子是什么，这篇文章主要讲的不是板子的问题，而是如何通过串口的AT指令控制GA6-B这种支持GPRS的短信模块来实现MQTT协议，以及微信小程序显示单片机发布的数据。&lt;/p&gt;</description>
    </item>
    <item>
      <title>对快速幂代码的理解</title>
      <link>https://www.clayhex.com/posts/2020/03/quick-power/</link>
      <pubDate>Mon, 02 Mar 2020 19:33:46 +0800</pubDate>
      <guid>https://www.clayhex.com/posts/2020/03/quick-power/</guid>
      <description>关于快速幂</description>
    </item>
  </channel>
</rss>
